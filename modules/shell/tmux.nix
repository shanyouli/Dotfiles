{ config, options, pkgs, lib, ... }:

with lib;
with lib.my;
let cfg = config.modules.shell.tmux;
    tmuxHome = "${xdgConfig}/tmux";
    # Despite tmux/tmux#142, tmux will support XDG in 3.2. Sadly, only 3.0 is
    # available on nixpkgs, and 3.1b on master (tmux/tmux@15d7e56), so I
    # implement it myself:
    tmux = let
      inherit (pkgs) tmux symlinkJoin makeWrapper ;
      flags = ''-f "${tmuxHome}/config"'';
    in symlinkJoin {
      name = "my-tmux-${tmux.version}";
      paths = [ tmux ];
      buildInputs = [ makeWrapper ];
      postBuild = ''
        wrapProgram $out/bin/tmux --add-flags "${flags}"
      '';
    };
in {
  options.modules.shell.tmux = with types; {
    enable = mkBoolOpt false;
    tmuxifierEn = mkBoolOpt true;
    themeEn = mkBoolOpt true;
    rcFiles = mkOpt (listOf (either str path)) [];
  };

  config = mkIf cfg.enable {
    user.packages = [ tmux  (mkIf cfg.tmuxifierEn pkgs.my.tmuxifier)];

    modules.theme.onReload.tmux = ''
      ${tmux}/bin/tmux source-file $XDG_CONFIG_HOME/tmux/extraInit
    '';

    modules.shell.zsh = {
      rcInit = mkIf cfg.tmuxifierEn "_cache tmuxifier init -";
      rcFiles = [ "${configDir}/tmux/aliases.zsh" ];
    };

    home.configFile = (mkMerge [
      (mkIf cfg.tmuxifierEn {
        "tmuxifier" = { source = "${configDir}/tmuxifier"; recursive = true; };
      })
      {
        "tmux" = { source = "${configDir}/tmux"; recursive = true; };
        "tmux/extraInit".text = ''
          ${concatMapStrings (path: "source '${path}'\n") cfg.rcFiles}
          ${optionalString cfg.themeEn ''
            set -g @tmux-grubox '${config.modules.theme.active}'
          ''}
          # add theme config
          run-shell ${configDir}/tmux/config.theme
          # This file is auto-generated by nixos, don't edit by hand!
          run-shell ${pkgs.tmuxPlugins.copycat}/share/tmux-plugins/copycat/copycat.tmux
          run-shell ${pkgs.tmuxPlugins.prefix-highlight}/share/tmux-plugins/prefix-highlight/prefix_highlight.tmux
          run-shell ${pkgs.tmuxPlugins.yank}/share/tmux-plugins/yank/yank.tmux
          run-shell ${pkgs.tmuxPlugins.open}/share/tmux-plugins/open/open.tmux
      '';
      }
    ]);
    env = (mkMerge [
      (mkIf cfg.tmuxifierEn {
        TMUXIFIER_LAYOUT_PATH = "$XDG_CONFIG_HOME/tmuxifier";
      })
      { TMUX_HOME = "$XDG_CONFIG_HOME/tmux"; }
    ]);
  };
}
