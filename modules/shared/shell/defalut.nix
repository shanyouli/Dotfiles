{
  config,
  options,
  pkgs,
  lib,
  ...
}:
with lib;
with lib.my; let
  cfg = config.modules.shell;
in {
  options.modules.shell = with types; {
    enZinit = mkBoolOpt false;
    enZoxide = mkBoolOpt false;
    enNavi = mkBoolOpt false;
    enVivid = mkBoolOpt false;
    aliases = mkOpt (attrsOf (either str path)) {};
    env = mkOption {
      type = attrsOf (oneOf [str path (listOf (either str path))]);
      apply = mapAttrs (n: v:
        if isList v
        then
          (
            if (strings.toUpper "${n}") == "PATH"
            then concatMapStringsSep " " toString v
            else concatMapStringsSep ":" toString v
          )
        else (toString v));
      default = {};
      description = "TODO";
    };
    rcInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
      $XDG_CONFIG_HOME/zsh/.zshrc
    '';
    envInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshenv and sourced
      by $XDG_CONFIG_HOME/zsh/.zshenv
    '';
    prevInit = mkOpt' lines "" "zshrc pre";
    rcFiles = mkOpt (listOf (either str path)) [];
    envFiles = mkOpt (listOf (either str path)) [];
  };

  # 一些现代命令行工具的推荐:https://github.com/ibraheemdev/modern-unix
  config = mkMerge [
    {
      # lib.mkIf cfg.enable (lib.mkMerge [{ users.defaultUserShell = pkgs.zsh; }]);
      # only nixos
      # users.defaultUserShell = pkgs.zsh;
      my.user.shell = pkgs.zsh;
      programs.zsh = {
        enable = true;
        # 我将自动启用bashcompinit 和compinit配置
        enableCompletion = false;
        enableBashCompletion = false;
        promptInit = "";
      };
      user.packages = with pkgs; [
        bottom
        fd
        eza
        nix-index
        bat
        any-nix-shell
        duf
        httrack # 网页抓取
        cachix # nix cache
        hugo # 我的blog工具
        imagemagick # 图片转换工具
        gifsicle # 命令行gif生成工具

        atool # 解压工具
        gnused # sed 工具
        coreutils-prefixed # GNUcoreutils 工具，mv，cp等
        (pkgs.sysdo.override {
          withZshCompletion = true;
          withRich = true;
        })
      ];
      env = {
        PATH = ["${config.my.hm.binHome}"];
        ZDOTDIR = "$XDG_CONFIG_HOME/zsh";
        ZSH_CACHE = "${config.my.hm.cacheHome}/zsh";
      };
      modules.shell = {
        prevInit = ''
          # starship和p10有自己的提示方法；--info-right
          _cache ${pkgs.any-nix-shell}/bin/any-nix-shell zsh
          source ${pkgs.nix-index}/etc/profile.d/command-not-found.sh
        '';
        aliases.htop = "btm --basic --mem_as_value";
        aliases.df = "duf";
        aliases.cat = "bat -p"; #or  bat -pp
        aliases.unzip = "atool --extract --explain";
        aliases.zip = "atool --add";
      };

      my.hm = {
        configFile = {
          "bat/themes" = {
            source = "${configDir}/bat/themes";
            recursive = true;
          };
          "zsh" = {
            source = "${configDir}/zsh";
            recursive = true;
          };
          "zsh/prev.zshrc".text = ''
            ${cfg.prevInit}
          '';
          "zsh/extra.zshrc".text = let
            p10 =
              if config.modules.shell.starship.enable
              then "_cache starship init zsh --print-full-init"
              else ''
                zinit ice depth=1
                zinit light romkatv/powerlevel10k
              '';
            aliasLines =
              mapAttrsToList (n: v: ''alias ${n}="${v}"'') cfg.aliases;
          in ''
            # This file was autogenerated, do not edit it!
            ${p10}
            ${concatStringsSep "\n" aliasLines}
            ${concatMapStrings (path: ''
                source '${path}'
              '')
              cfg.rcFiles}
            ${cfg.rcInit}
          '';
          "zsh/extra.zshenv".text = let
            envLines =
              mapAttrsToList (n: v: (
                if (strings.toUpper "${n}") == "PATH"
                then ''export path=( ${v} $path)''
                else ''export ${n}="${v}"''
              ))
              cfg.env;
            dotfiles =
              if pkgs.stdenvNoCC.isDarwin
              then "${config.user.home}/.nixpkgs"
              else "/etc/nixos";
          in ''
            typeset -U path
            # if [ -n "$__MY_ZSHENV_SOURCED" ]; then return; fi
            # export __MY_ZSHENV_SOURCED=1
            # This file is autogenerated, do not edit it!
            export DOTFILES=${dotfiles}
            ${concatStringsSep "\n" envLines}
            ${concatMapStringsSep "\n" (path: "source '${path}' ") cfg.envFiles}
            ${cfg.envInit}
          '';
        };
      };
    }
    (mkIf cfg.enZoxide {
      user.packages = [pkgs.zoxide];
      modules.shell.rcInit = ''
        _cache zoxide init zsh
      '';
    })
    (mkIf cfg.enNavi {
      user.packages = [pkgs.navi];
    })
    # 一个更好的LS_COLORS 工具: https://github.com/sharkdp/vivid
    (mkIf cfg.enVivid {
      user.packages = [pkgs.vivid];
    })
    (mkIf cfg.enZinit {
      user.packages = [pkgs.zinit];
      modules.shell.env.ZINIT_HOME = "${pkgs.zinit}/share/zinit";
    })
  ];
}
