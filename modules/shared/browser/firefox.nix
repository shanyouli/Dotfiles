{
  pkgs,
  lib,
  config,
  options,
  ...
}:
with lib;
with lib.my; let
  cfm = config.modules;
  cfg = cfm.browser.firefox;
  mozillaConfDir = cfm.browser.configDir.firefox;
  cfgConfDir =
    if pkgs.stdenvNoCC.isDarwin
    then "Library/Application Support/Firefox"
    else "${mozillaConfDir}/firefox";

  wrapPackage = package: let
    fcfg = {enableGnomeExtensions = cfg.enableGnomeExtensions;};
  in
    if package == null
    then null
    else if pkgs.stdenvNoCC.isDarwin
    then package
    else package.override (old: {cfg = old.cfg or {} // fcfg;});
  extensionPath = "extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}";
in {
  options.modules.browser.firefox = {
    enable = mkEnableOption "Whether to using firefox";
    dev.enable = mkBoolOpt true;
    package = mkOption {
      type = with types; nullOr package;
      default =
        if pkgs.stdenvNoCC.isLinux
        then pkgs.firefox
        else pkgs.unstable.darwinapps.firefox;
      description = "The Firefox package to use. ";
    };
    finalPackage = mkOption {
      type = with types; nullOr package;
      readOnly = true;
      description = "Resulting Firefox package.";
    };
    profileName = mkOpt types.str "Default";
    settings = with types;
      mkOpt' (attrsOf (oneOf [bool int str])) {} ''
        Firefox preferences to set in <filename>user.js</filename> or "mozilla.cfg"
      '';
    extraConfig = with types;
      mkOpt' lines "" ''
        Extra Lines to add to user.js or mozilla.cfg
      '';
    userChrome = with types; mkOpt' lines "" "CSS styles for Firefox's interface";
    userContent = with types; mkOpt' lines "" "Global CSS styles for websites";
    extensions = mkOption {
      type = with types; nullOr (listOf package);
      default = null;
      description = "Firefox addons packages.";
    };
    enableGnomeExtensions = mkOpt' types.bool false ''
      GnomeShell extensions, Note, you also need to set the NixOS option
      `services.gnome.gnome-browser-connector.enable` to `true`.
    '';
  };
  config = mkIf cfg.enable (mkMerge [
    {
      modules.browser.firefox.settings = mkMerge [
        (import (config.dotfiles.configDir + "/firefox/annoyances.nix"))
        (import (config.dotfiles.configDir + "/firefox/browser-features.nix"))
        (import (config.dotfiles.configDir + "/firefox/privacy.nix"))
        (import (config.dotfiles.configDir + "/firefox/tracking.nix"))
        (import (config.dotfiles.configDir + "/firefox/security.nix"))
        {
          "toolkit.legacyUserProfileCustomizations.stylesheets" = true;
          "svg.context-properties.content.enabled" = true;
          "extensions.htmlaboutaddons.recommendations.enabled" = false; # 扩展页浏览器推荐
          # "image.mem.max_decoded_image_kb" = 51200;
          # "image.mem.min_discard_timeout_ms" =  10000;
          # "image.mem.surfacecache.max_size_kb" = 51200;
          # "image.mem.surfacecache.size_factor" = 32;
          # "javascript.options.mem.max" = 51200;
          # "javascript.options.mem.gc_frequency" = 10;
          # "javascript.options.mem.high_water_mark" = 16;
        }
      ];
      modules.shell.gopass.browsers = ["firefox"];
      modules.browser.firefox.extensions = mkDefault (with pkgs.unstable.firefox-addons; [
        (mkIf cfm.shell.gopass.enable browserpass-ce)
        noscript
        ublock-origin
        download-with-aria2
        sidebery
        darkreader
        surfingkeys_ff
        auto-tab-discard
        user-agent-string-switcher
        violentmonkey
        # switchyomega
        styl-us
        privacy-pass
      ]);
      modules.browser.firefox.finalPackage = wrapPackage cfg.package;
    }
    {
      user.packages =
        [cfg.finalPackage] ++ optionals cfg.dev.enable [pkgs.unstable.geckodriver];
      home.file = let
        profilePath = "${cfgConfDir}/Profiles/${lib.toLower cfg.profileName}";
      in
        mkMerge [
          {
            "${cfgConfDir}/profiles.ini".text = ''
              [General]
              StartWithLastProfile=1

              [Profile0]
              Default=1
              IsRelative=1
              Name=${cfg.profileName}
              Path=Profiles/${lib.toLower cfg.profileName}

              [Profile1]
              Default=0
              IsRelative=1
              Name=shit
              Path=Profiles/shit
            '';
            "${profilePath}/.keep".text = "";
            "${profilePath}/chrome/userChrome.css" = mkIf (cfg.userChrome != "") {text = cfg.userChrome;};
            "${profilePath}/chrome/userContent.css" = mkIf (cfg.userContent != "") {text = cfg.userContent;};
            "${profilePath}/user.js" = mkIf (cfg.settings != {} || cfg.extraConfig != "") {
              text = ''
                // Auto-generated by my configuration
                ${concatStrings (mapAttrsToList (name: value: ''
                    user_pref("${name}", ${builtins.toJSON value});
                  '')
                  cfg.settings)}

                ${cfg.extraConfig}
              '';
            };
            "${profilePath}/extensions" = mkIf (cfg.extensions
              != null
              || cfg.extensions != []
              || ((builtins.typeOf cfg.extensions) == "set") && (! builtins.elem cfg.extensions.content [null []])) {
              source = let
                extensionsEnvPkg = pkgs.buildEnv {
                  name = "my-firefox-extensions";
                  paths = cfg.extensions;
                };
              in "${extensionsEnvPkg}/share/mozilla/${extensionPath}";
              recursive = true;
              force = true;
            };
          }
          (mkIf (cfg.userContent == "" || cfg.userChrome == "") {
            "${profilePath}/chrome" = {
              source = "${config.dotfiles.configDir}/firefox/chrome";
              recursive = true;
            };
            "${profilePath}/chrome/utils" = {
              source = "${pkgs.unstable.firefox-utils}/share/utils";
              recursive = true;
            };
          })
        ];
    }
  ]);
}
